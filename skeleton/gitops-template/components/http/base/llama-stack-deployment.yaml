kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    tad.gitops.set/image: ".spec.template.spec.containers[0].image"
    tad.gitops.get/image: ".spec.template.spec.containers[0].image"
    tad.gitops.set/replicas: ".spec.replicas"
    tad.gitops.get/replicas: ".spec.replicas"
  labels:
    app.kubernetes.io/instance: ${{ values.name }}
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: ${{ values.name }}
    app.kubernetes.io/part-of: ${{ values.name }}
  name: ${{ values.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ${{ values.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: ${{ values.name }}
    spec:
      volumes:
        - name: run-config-volume
          configMap:
            name: run-config
            defaultMode: 420
        - name: llama-persist
          persistentVolumeClaim:
            claimName: ${{ values.name }}
        - name: cache
          emptyDir: {}
        - name: pythain
          emptyDir: {}
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: llamastack
          env:
            - name: MAX_TOKENS
              value: '128000'
            - name: VLLM_MAX_TOKENS
              value: '128000'
            - name: LLAMA3B_URL
              value: 'https://llama32-3b.llama-serve.svc.cluster.local/v1'
            - name: LLAMA3B_MODEL
              value: llama32-3b
            - name: GRANITE_URL
              value: 'https://granite32-8b.llama-serve.svc.cluster.local/v1'
            - name: GRANITE_MODEL
              value: granite32-8b
            - name: VLLM_API_TOKEN
              value: fake
            - name: CUSTOM_TIKTOKEN_CACHE_DIR
              value: /app/cache
            - name: MILVUS_DB_PATH
              value: milvus.db
            - name: LLAMA_STACK_LOGGING
              value: all=debug
            - name: INFERENCE_MODEL
              value: llama3.1:8b
            - name: OLLAMA_URL
              value: ${{  values.ollamaHostname  }}
            - name: OLLAMA_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ${{  values.ollamaApiSecretName  }}
                  key: ${{  values.ollamaApiSecretKey  }}
          ports:
            - containerPort: 8321
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - name: pythain
              mountPath: /pythainlp-data
            - name: run-config-volume
              mountPath: /app-config
            - name: llama-persist
              mountPath: /.llama
            - name: cache
              mountPath: /.cache
          terminationMessagePolicy: File
          image: 'quay.io/redhat-et/llama:vllm-0.2.6'
          args:
            - '--config'
            - /app-config/config.yaml
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600